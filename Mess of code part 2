# CFMSProgramming
public class FakeMotorEx implements DcMotorEx {
private boolean motorEnable = true;

private double motorPower;
private Map<RunMode, PIDCoefficients> pidCoefficients = new HashMap<>();

private Map<RunMode, PIDFCoefficients> pidfCoefficients = new HashMap<>();


private int currentEncoderPosition;

private int targetPositionTolerance;


@Override
public void setPower(double power) {
  this.motorpower = power;
}

@Override
public double getPower() {
  returm motorPower

//other examples
/*
* Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
*/
@Override
public void loop() {
// Setup a variable for each drive wheel to save power level for telemetry
double LeftPower;
double rightPower;

//Choose to drive using either Tank Mode, or POV Mode
// Comment out the method that's not used. The default below is POV

// POV Mode uses left stick to go forward, and right stick to turn.
// - This uses basic math to combine motions and is easier to drive straight.
double drive = -gamepad1.left_stick_y;
double turn = gamepad1.right_stick_x;
leftPower =Range.clip(drive + turn, -1.0, 1.0) ;
rightPower =Range.clip(drive-turn, -1.0, 1.0) ;
// Tank Mode uses one stick to control each wheel.
// - This requires no math, but it is hard to drive forward slowly and keep straight. 
// leftPower = -gamepad1.left_stick_y;
// rightPower = -gamepad1.right_stick_y:
// Send calculated power to wheels
leftDrive.setPower(leftPower);
rightDrive.setPower(rightPower);

// Show the elapsed game time and wheel power
telemetry.addData("Status", "Run Time: " + runtime.toString());
telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
}
  https://raw.githubusercontent.com/UnluckyClover313/CFMSProgramming/main/Mess%20of%20code%20part%202

